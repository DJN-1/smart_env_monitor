#ifndef FONT_DATA_H
#define FONT_DATA_H

#include <linux/types.h> // u8 타입 정의

// Row-Major 방식의 전체 6x8 폰트 데이터 
static const u8 font6x8_basic[96][8] = {
    // ASCII 32 ~ 127
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // ' '
    { 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x18 },   // '!'
    { 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00 },   // '"'
    { 0x00, 0x18, 0x3C, 0x18, 0x3C, 0x18, 0x00, 0x00 },   // '#'
    { 0x00, 0x0C, 0x3E, 0x0A, 0x0A, 0x3E, 0x08, 0x00 },   // '$'
    { 0x00, 0x38, 0x24, 0x10, 0x08, 0x24, 0x1C, 0x00 },   // '%'
    { 0x00, 0x1C, 0x20, 0x14, 0x2A, 0x2A, 0x1C, 0x00 },   // '&'
    { 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00 },   // '''
    { 0x00, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x00 },   // '('
    { 0x00, 0x30, 0x18, 0x18, 0x18, 0x18, 0x30, 0x00 },   // ')'
    { 0x00, 0x00, 0x2A, 0x1C, 0x3E, 0x1C, 0x2A, 0x00 },   // '*'
    { 0x00, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00 },   // '+'
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x0C },   // ','
    { 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00 },   // '-'
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00 },   // '.'
    { 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00 },   // '/'
    { 0x00, 0x1C, 0x22, 0x2A, 0x2A, 0x22, 0x1C, 0x00 },   // '0'
    { 0x00, 0x08, 0x18, 0x08, 0x08, 0x08, 0x1C, 0x00 },   // '1'
    { 0x00, 0x1C, 0x22, 0x02, 0x04, 0x08, 0x3E, 0x00 },   // '2'
    { 0x00, 0x1C, 0x22, 0x04, 0x18, 0x22, 0x1C, 0x00 },   // '3'
    { 0x00, 0x04, 0x0C, 0x14, 0x24, 0x3E, 0x04, 0x00 },   // '4'
    { 0x00, 0x3E, 0x20, 0x3C, 0x02, 0x22, 0x1C, 0x00 },   // '5'
    { 0x00, 0x1C, 0x20, 0x3C, 0x22, 0x22, 0x1C, 0x00 },   // '6'
    { 0x00, 0x3E, 0x22, 0x04, 0x08, 0x10, 0x10, 0x00 },   // '7'
    { 0x00, 0x1C, 0x22, 0x22, 0x1C, 0x22, 0x1C, 0x00 },   // '8'
    { 0x00, 0x1C, 0x22, 0x22, 0x1E, 0x02, 0x1C, 0x00 },   // '9'
    { 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18 },   // ':'
    { 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x0C },   // ';'
    { 0x00, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04 },   // '<'
    { 0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00, 0x00 },   // '='
    { 0x00, 0x20, 0x10, 0x08, 0x04, 0x08, 0x10, 0x20 },   // '>'
    { 0x00, 0x1C, 0x22, 0x02, 0x04, 0x08, 0x00, 0x08 },   // '?'
    { 0x00, 0x1C, 0x22, 0x2A, 0x2A, 0x2A, 0x02, 0x1C },   // '@'
    { 0x00, 0x08, 0x14, 0x22, 0x22, 0x3E, 0x22, 0x22 },   // 'A'
    { 0x00, 0x3C, 0x22, 0x22, 0x3C, 0x22, 0x22, 0x3C },   // 'B'
    { 0x00, 0x1C, 0x22, 0x20, 0x20, 0x20, 0x22, 0x1C },   // 'C'
    { 0x00, 0x3C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3C },   // 'D'
    { 0x00, 0x3E, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x3E },   // 'E'
    { 0x00, 0x3E, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x20 },   // 'F'
    { 0x00, 0x1C, 0x22, 0x20, 0x2E, 0x22, 0x22, 0x1C },   // 'G'
    { 0x00, 0x22, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x22 },   // 'H'
    { 0x00, 0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C },   // 'I'
    { 0x00, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x24, 0x18 },   // 'J'
    { 0x00, 0x22, 0x24, 0x28, 0x30, 0x28, 0x24, 0x22 },   // 'K'
    { 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3E },   // 'L'
    { 0x00, 0x22, 0x36, 0x2A, 0x2A, 0x22, 0x22, 0x22 },   // 'M'
    { 0x00, 0x22, 0x22, 0x32, 0x2A, 0x26, 0x22, 0x22 },   // 'N'
    { 0x00, 0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C },   // 'O'
    { 0x00, 0x3C, 0x22, 0x22, 0x22, 0x3C, 0x20, 0x20 },   // 'P'
    { 0x00, 0x1C, 0x22, 0x22, 0x22, 0x2A, 0x1C, 0x02 },   // 'Q'
    { 0x00, 0x3C, 0x22, 0x22, 0x3C, 0x28, 0x24, 0x22 },   // 'R'
    { 0x00, 0x1E, 0x20, 0x20, 0x1C, 0x02, 0x02, 0x3C },   // 'S'
    { 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 },   // 'T'
    { 0x00, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C },   // 'U'
    { 0x00, 0x22, 0x22, 0x22, 0x22, 0x14, 0x08, 0x00 },   // 'V'
    { 0x00, 0x22, 0x22, 0x22, 0x2A, 0x2A, 0x36, 0x22 },   // 'W'
    { 0x00, 0x22, 0x14, 0x08, 0x08, 0x14, 0x22, 0x00 },   // 'X'
    { 0x00, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08 },   // 'Y'
    { 0x00, 0x3E, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3E },   // 'Z'
    { 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C },   // '['
    { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00 },   // '\'
    { 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C },   // ']'
    { 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00 },   // '^'
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E },   // '_'
    { 0x00, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00 },   // '`'
    { 0x00, 0x00, 0x00, 0x1C, 0x22, 0x1E, 0x22, 0x1E },   // 'a'
    { 0x00, 0x20, 0x20, 0x2C, 0x32, 0x22, 0x22, 0x3C },   // 'b'
    { 0x00, 0x00, 0x00, 0x1C, 0x20, 0x20, 0x20, 0x1C },   // 'c'
    { 0x00, 0x02, 0x02, 0x1A, 0x26, 0x22, 0x22, 0x1E },   // 'd'
    { 0x00, 0x00, 0x00, 0x1C, 0x2A, 0x3C, 0x20, 0x1C },   // 'e'
    { 0x00, 0x0C, 0x12, 0x10, 0x3C, 0x10, 0x10, 0x10 },   // 'f'
    { 0x00, 0x00, 0x1E, 0x22, 0x22, 0x1E, 0x02, 0x1C },   // 'g'
    { 0x00, 0x20, 0x20, 0x2C, 0x32, 0x22, 0x22, 0x22 },   // 'h'
    { 0x00, 0x00, 0x08, 0x00, 0x18, 0x08, 0x08, 0x1C },   // 'i'
    { 0x00, 0x04, 0x00, 0x0C, 0x04, 0x04, 0x24, 0x18 },   // 'j'
    { 0x00, 0x20, 0x20, 0x24, 0x28, 0x30, 0x28, 0x24 },   // 'k'
    { 0x00, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C },   // 'l'
    { 0x00, 0x00, 0x00, 0x2A, 0x3E, 0x2A, 0x2A, 0x2A },   // 'm'
    { 0x00, 0x00, 0x00, 0x2C, 0x32, 0x22, 0x22, 0x22 },   // 'n'
    { 0x00, 0x00, 0x00, 0x1C, 0x22, 0x22, 0x22, 0x1C },   // 'o'
    { 0x00, 0x00, 0x00, 0x3C, 0x22, 0x22, 0x3C, 0x20 },   // 'p'
    { 0x00, 0x00, 0x00, 0x1E, 0x22, 0x22, 0x1E, 0x02 },   // 'q'
    { 0x00, 0x00, 0x00, 0x2C, 0x32, 0x20, 0x20, 0x20 },   // 'r'
    { 0x00, 0x00, 0x00, 0x1E, 0x20, 0x1C, 0x02, 0x3C },   // 's'
    { 0x00, 0x10, 0x10, 0x3C, 0x10, 0x10, 0x12, 0x0C },   // 't'
    { 0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x22, 0x1E },   // 'u'
    { 0x00, 0x00, 0x00, 0x22, 0x22, 0x14, 0x08, 0x00 },   // 'v'
    { 0x00, 0x00, 0x00, 0x22, 0x22, 0x2A, 0x14, 0x00 },   // 'w'
    { 0x00, 0x00, 0x00, 0x22, 0x14, 0x08, 0x14, 0x22 },   // 'x'
    { 0x00, 0x00, 0x00, 0x22, 0x22, 0x1E, 0x02, 0x1C },   // 'y'
    { 0x00, 0x00, 0x00, 0x3E, 0x04, 0x08, 0x10, 0x3E },   // 'z'
    { 0x00, 0x0C, 0x18, 0x18, 0x08, 0x18, 0x18, 0x0C },   // '{'
    { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 },   // '|'
    { 0x00, 0x30, 0x18, 0x18, 0x10, 0x18, 0x18, 0x30 },   // '}'
    { 0x00, 0x34, 0x08, 0x14, 0x00, 0x00, 0x00, 0x00 },   // '~'
    { 0x00, 0x1C, 0x22, 0x20, 0x20, 0x22, 0x1C, 0x00 },   // DEL
};

// Row-Major 6x8 폰트용 좌우 반전 함수
static inline void flip_font_6x8_horizontal(const u8 *src, u8 *dst) {
    int row, col;
    for (row = 0; row < 8; row++) { // 8개의 행을 순회
        u8 val = 0;
        for (col = 0; col < 6; col++) { // 6개의 열(비트)을 순회
            if ((src[row] >> col) & 1) {
                val |= (1 << (5 - col));
            }
        }
        dst[row] = val;
    }
}


#endif // FONT_DATA_H
